Do the following to create, execute and compare linear regression models for the heating load from the building energy efficiency data set. Use all features for each of your models. Make sure you removed the cooling load column first, since it is nearly collinear with heating load!
1. Stepwise Regression. Use the stepAIC function from the MASS package to perform stepwise regression starting with the linear model including all features. Which features are remain in the model? Evaluate this model using the summary and plot methods for your model object.
2. SVD Regression. Create a model matrix for all features using the model.matrix function with no intercept term (e.g. -1 in your model formula). Examine the first few rows of the model matrix. Notice how the categorical variables are encoded by a series of dummy variables. Does the coding make sense given the number of unique levels? Next, compute the SVD of the model matrix. Examine the singular values and determine which diagonal elements of the inverse singular value matrix should be set to zero. A plot may help you understand the fall-off in singular values. Then compute the weight vector. Use the weight vector to compute scores and evaluate the model. You may need to try models with several different numbers of inverse singular values set to zero to find a model with good overall performance.
3. Elastic Net Regression. Elastic net regression is the combination of ridge regression and lasso regression. In this case use an alpha parameter of 0.5 to give equal weight to each regularization method. Using the model matrix you created for part 2 and the 1-d matrix of heating loads, compute a Gaussian regression model using 20 values of the regularization parameter lambda. Compute the scores using the predict method. Plot and examine the evaluation of the parameter values and deviance with lambda. Choose a value of lambda (a column in the scores matrix) and evaluate your model. You may need to try several lambdaâ€™s to find one which gives good overall performance.

To evaluate and compare these models use both summary statistics and plots of the residuals. How similar or different is the performance? Do you consider any of these models to be a good fit to the data?

Note, we are ignoring the obvious bias problem which arises from evaluating a model using the same data used to train the model.


 $ symboling        : int  3 3 1 2 2 2 1 1 1 2 ...
 $ normalized.losses: chr  "?" "?" "?" "164" ...
 $ make             : chr  "alfa-romero" "alfa-romero" "alfa-romero" "audi" ...
 $ fuel.type        : Factor w/ 2 levels "diesel","gas": 2 2 2 2 2 2 2 2 2 2 ...
 $ aspiration       : Factor w/ 2 levels "std","turbo": 1 1 1 1 1 1 1 1 2 1 ...
 $ num.of.doors     : chr  "two" "two" "two" "four" ...
 $ body.style       : Factor w/ 5 levels "convertible",..: 1 1 3 4 4 4 4 5 4 4 ...
 $ drive.wheels     : Factor w/ 3 levels "4wd","fwd","rwd": 3 3 3 2 1 2 2 2 2 3 ...
 $ engine.location  : chr  "front" "front" "front" "front" ...
 $ wheel.base       : num  88.6 88.6 94.5 99.8 99.4 ...
 $ length           : num  169 169 171 177 177 ...
 $ width            : num  64.1 64.1 65.5 66.2 66.4 66.3 71.4 71.4 71.4 64.8 ...
 $ height           : num  48.8 48.8 52.4 54.3 54.3 53.1 55.7 55.7 55.9 54.3 ...
 $ curb.weight      : int  2548 2548 2823 2337 2824 2507 2844 2954 3086 2395 ...
 $ engine.type      : chr  "dohc" "dohc" "ohcv" "ohc" ...
 $ num.of.cylinders : chr  "four" "four" "six" "four" ...
 $ engine.size      : int  130 130 152 109 136 136 136 136 131 108 ...
 $ fuel.system      : chr  "mpfi" "mpfi" "mpfi" "mpfi" ...
 $ bore             : chr  "3.47" "3.47" "2.68" "3.19" ...
 $ stroke           : chr  "2.68" "2.68" "3.47" "3.40" ...
 $ compression.ratio: num  9 9 9 10 8 8.5 8.5 8.5 8.3 8.8 ...
 $ horsepower       : chr  "111" "111" "154" "102" ...
 $ peak.rpm         : num  5000 5000 5000 5500 5500 5500 5500 5500 5500 5800 ...
 $ city.mpg         : int  21 21 19 24 18 19 19 19 17 23 ...
 $ highway.mpg      : int  27 27 26 30 22 25 25 25 20 29 ...
 $ price            : num  9.51 9.71 9.71 9.54 9.77 ...