x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
vect2
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-1:20
v
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
matrix(1:20,4,5)
matrix(1:20,4,5,byrow=TRUE
)
m_matrix<-ymatrix(1:20,4)
m_matrix<-matrix(1:20,4)
m_matrix<-matrix(1:20,4,5)
my_matrix<-matrix(1:20,4,5)
my_matrix2<-matrix(1:20,4,5)
my_matrix2<-matrix(1:20,4,5)
info()
my_matrix2<-matrix(1:20,nrow=14,ncol=5)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
1
0
#14
x <- c('Red', 'Green', 'Blue', 'Green', 'Blue', 'Blue', 'Red', 'Blue', 'Yellow', 'Blue')
isRed <- x == 'Red'
isGreen <- x == 'Green'
isBlue <- x == 'Blue'
# You can cast T/F into 1/0
isRed <- as.numeric(isRed)
isGreen <- as.numeric(isGreen)
isBlue <- as.numeric(isBlue)
# As a data frame
data.frame(isRed, isGreen, isBlue)
source('C:/Users/dwine/Google Drive/UW Data Science/PatientReadmission.R')
source('C:/Users/dwine/Google Drive/UW Data Science/PatientReadmission.R')
source('~/.active-rstudio-document')
install.packages("sqldf")
test<-sqldf("select * from tableA fulljoin tableB on tableA.keyA=tableB.keyb",rownames=TRUE)
source('C:/Users/dwine/Google Drive/UW Data Science/Assignment 05_DW.R')
tableA
source('C:/Users/dwine/Google Drive/UW Data Science/Assignment 05_DW.R')
test<-sqldf("select * from tableA fulljoin tableB on tableA.keyA=tableB.keyb",rownames=TRUE)
sqldf()
# head
a1r <- head(warpbreaks)
a1s <- sqldf("select * from warpbreaks limit 6")
identical(a1r, a1s)
# subset
a2r <- subset(CO2, grepl("^Qn", Plant))
a2s <- sqldf("select * from CO2 where Plant like 'Qn%'")
all.equal(as.data.frame(a2r), a2s)
install.packages("sqldf")
a2r <- subset(CO2, grepl("^Qn", Plant))
a2s <- sqldf("select * from CO2 where Plant like 'Qn%'")
all.equal(as.data.frame(a2r), a2s)
a2r
a1r <- head(warpbreaks)
a1s <- sqldf("select * from warpbreaks limit 6")
source('C:/Users/dwine/Google Drive/UW Data Science/Assignment 05_DW.R')
install.packages(sqldf)
install.packages(sqldf::)
source('C:/Users/dwine/Google Drive/UW Data Science/Assignment 05_DW.R')
sqldf::sqldf("select * from warpbreaks limit 6")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
install.packages('repr')
install.packages('IRdisplay')
IRkernel::installspec(user = FALSE)
devtools::install_github('IRkernel/IRkernel')
install.packages('repr')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages('Rtools')
install.packages('Rtools')
devtools::install_github('IRkernel/IRkernel')
install.packages('stringi')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages('IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages('curl')
install.packages('ggplot2')
pick.another <-function(not.this.one,all.possible){
x <- as.integer(runif(1,0,all.possible)+1
if(x == not.this.one) pick.another(not.this.one,all.possible) else x
}
install.packages('plyr')
install.packages('ggplot2')
source('C:/Users/dwine/Desktop/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
df.mean <- data.frame(BinomialMean = binom_means, SampleMean = unlist(binom_sample_means))
print(df.mean)
car.stay.binom <- binom.plot(car.stay.df,n,p.stay)
View(binom.plot)
View(binom.plot)
View(doors.load)
View(game.instance)
View(host.reveal)
car.stay.binom <- binom.plot(car.stay.df,n,p.stay)
car.stay.binom
df.mean
car.stay.binom <- binom.plot(car.stay.df,n,p.stay)
# Binomial plot function (stolen proudly from Distributions.R!)
binom.plot <- function(data.df,num.runs,p){
N = num.runs # parameter list
#binom_samples = lapply(N, function(x) rbinom(nb, x, p))  # Compute list of random draws
binom_samples =data.df  # Compute list of random draws
binom_sample_means = lapply(binom_samples, mean)  # Compute list of sample means
binom_means = N*p
df.mean <- data.frame(BinomialMean = binom_means, SampleMean = unlist(binom_sample_means))
binom_sample_vars = lapply(binom_samples, var) # Compute list of sample variance
binom_vars = N*p*(1-p)
df.var <- data.frame(BinomialVariance = binom_vars, SampleVariance = unlist(binom_sample_vars))
par(mfrow=c(1,3))
invisible(lapply(binom_samples, function(x) hist(x))) # histograms of random draws
par(mfrow=c(1,1))
# Compare Normal Approximation to binomial
par(mfrow=c(1,3))
for (i in 1:3){
hist(binom_samples[[i]], main=paste(N[i],'Experiments'), freq=FALSE)
x_norm = seq(0,N[i], by = 0.025)
y_norm = dnorm(x_norm, mean=binom_means[i], sd=sqrt(binom_vars[i]))
lines(x_norm, y_norm)
}
par(mfrow=c(1,1))
return(list(df.mean,df.var))
binom.plot <- function(data.df,num.runs,p){
N = num.runs # parameter list
#binom_samples = lapply(N, function(x) rbinom(nb, x, p))  # Compute list of random draws
binom_samples =data.df  # Compute list of random draws
binom_sample_means = lapply(binom_samples, mean)  # Compute list of sample means
binom_means = N*p
df.mean <- data.frame(BinomialMean = binom_means, SampleMean = unlist(binom_sample_means))
binom_sample_vars = lapply(binom_samples, var) # Compute list of sample variance
binom_vars = N*p*(1-p)
df.var <- data.frame(BinomialVariance = binom_vars, SampleVariance = unlist(binom_sample_vars))
par(mfrow=c(1,3))
invisible(lapply(binom_samples, function(x) hist(x))) # histograms of random draws
par(mfrow=c(1,1))
# Compare Normal Approximation to binomial
par(mfrow=c(1,3))
for (i in 1:3){
hist(binom_samples[[i]], main=paste(N[i],'Experiments'), freq=FALSE)
x_norm = seq(0,N[i], by = 0.025)
y_norm = dnorm(x_norm, mean=binom_means[i], sd=sqrt(binom_vars[i]))
lines(x_norm, y_norm)
}
par(mfrow=c(1,1))
return(list(df.mean,df.var))
}
car.stay.binom <- binom.plot(car.stay.df,n,p.stay)
car.stay.binom
car.switch.binom <- binom.plot(car.switch.df,n,p.switch)
car.switch.binom
car.stay.binom.p <-car.stay.binom/n
car.stay.means
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue')
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') + theme(axis.tite.x = "Number of Cars won")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') + theme(axis.title.x = "Number of Cars won")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') + xlab("Number of Cars won")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') + xlab("Number of Cars won")+ylab("Frequency") +
scale_x_continuous(formatter='log10')
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') + xlab("Number of Cars won")+ylab("Frequency")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
scale_x_log10() +
xlab("Number of cars won")+ylab("Frequency")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") + theme(legend.position="right")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),fill='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),color='blue')+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=3,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),color='blue',fill="NA")+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=2,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),color='blue',fill="NA")+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=2,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),color='blue',fill="NA")+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)") +
xlim(0,1000)
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=2,fill='red')+
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),color='blue',fill="NA")+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)") +
xlim(0,1000) + scale_x_continuous(100)
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=2,fill='red')+
scale_x_log10() +
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),color='blue',fill="NA")+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)") +
xlim(1,1000)
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=2,fill='red')+
scale_x_log10() +
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),color='blue',fill="NA")+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=2,fill='red')+
xlim(0,1000)
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),color='blue',fill="NA")+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+geom_histogram(binwidth=2,fill='red')+
xlim(0,1000) +
geom_histogram(binwidth=5,aes(med.st),fill='red')+
geom_histogram(binwidth=5,aes(hi.st),fill='red')+
geom_histogram(binwidth=5,aes(low.sw),color='blue',fill="NA")+
geom_histogram(binwidth=5,aes(med.sw),fill='blue')+
geom_histogram(binwidth=5,aes(hi.sw),fill='blue') +
xlab("Number of cars won")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
car.combined.df
car.stay.df.p <- lapply(car.stay.df,FUN = /n)
car.stay.df.p <- laply(car.stay.df,FUN = car.stay.df/n)
car.stay.df.p <- laply(car.stay.df,.FUN = car.stay.df/n)
car.stay.df.p <- lapply(car.stay.df,.FUN = car.stay.df/n)
car.stay.df.p <- lapply(n,.FUN = car.stay.df/n)
car.stay.df.p <- laply(n,function(n)car.stay.df/n)
car.stay.df.p
car.stay.df.p <- laply(n,function(n) car.stay.df/n)
car.stay.df.p <- laply(car.stay.df,function(n) car.stay.df/n)
car.stay.df.p <- llply(car.stay.df,function(n) car.stay.df/n)
car.stay.df.p <- llply(car.stay.df, car.stay.df/n)
m <- matrix(data=cbind(rnorm(30, 0), rnorm(30, 2), rnorm(30, 5)), nrow=30, ncol=3)
View(m)
View(m)
apply(m,1,mean)
apply(m,2,mean)
apply(m,2,function(x) length(x[x<0]))
apply(m,2,function(x) ismatrix(x))
apply(m,2,function(x) is.matrix(x))
apply(m,2,function(x) is.vector(x))
n <- c(1,10,100)
m*n
apply(n,2,function(x) m*n)
apply(n,2,function(m) m*n)
apply(n,2,function(n) m*n)
apply(n,2,function(n) {m*n})
apply(n,2,function(x) {m*n})
apply(m,2,function(x) {m*n})
sapply(1:3, function(x) mean(m[]))
sapply(1:3, function(x) mean(m[,x]))
sapply(1:3, function(x,y) mean(y[,x], y=m))
sapply(1:3, function(x,y) mean(y[,x]), y=m)
sapply(n, function(x,y) x*y, y=m)
View(m)
View(m)
m <- matrix(data=cbind(seq(0,10,1), rnorm(30, 2), rnorm(30, 5)), nrow=30, ncol=3)
m <- matrix(data=cbind(seq(0,30,1), rnorm(30, 2), rnorm(30, 5)), nrow=30, ncol=3)
m <- matrix(data=cbind(seq(0,29,1), rnorm(30, 2), rnorm(30, 5)), nrow=30, ncol=3)
View(m)
View(m)
m <- matrix(data=cbind(seq(0,29,1), seq(0,29,1),seq(0,29,1)), nrow=30, ncol=3)
View(m)
View(m)
sapply(n, function(x,y) x*y, y=m)
sapply(1:3, function(x,y,z) y*z[,x], y=m,z=n)
sapply(1:3, function(x,y,z) y*z*x, y=m,z=n)
sapply(1:3, function(x,y,z) y*z[x,], y=m,z=n)
n[0]
n[1]
sapply(1:3, function(x,y,z) y[x,1]*z[x,], y=m,z=n)
sapply(1:3, function(x,y,z) y[,x]*z[,x], y=m,z=n)
sapply(1:3, function(x,y) mean(y[,x]), y=m)
sapply(1:3, function(x,y,z) y[,x]*z[x,], y=m,z=n)
sapply(1:3, function(x,y,z) y[,x]*z[x], y=m,z=n)
apply(m,2,function(x,y) {m*n, y=n}
apply(m,2,function(x,y) {m*n, y=n})
apply(m,2,function(x,y) {m*n y=n})
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages('crayon')
install.packages(c( 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages('pbdZMQ')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages('digest')
install.packages("digest")
devtools::install_github('IRkernel/IRkernel')
install.packages("digest")
install.packages("digest")
devtools::install_github('IRkernel/IRkernel')
require(plyr)
setwd("C:/Users/dwine/Desktop/GitHub/UW-MDA-2017-DW")
# Test dataset
require(ggplot2)
read.auto = function(file = 'Automobile price data _Raw_.csv'){
## Read the csv file
auto.price <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
## Coerce some character columns to numeric
numcols <- c('price', 'bore', 'stroke', 'horsepower', 'peak.rpm')
auto.price[, numcols] <- lapply(auto.price[, numcols], as.numeric)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
auto.price[complete.cases(auto.price), ]
}
auto.price = read.auto()
str(auto.price)
hist(price)
hist(auto.price$price)
hist(auto.price$price,breaks="1000")
hist(auto.price$price,breaks=1000)
hist(auto.price$price,breaks=5000)
hist(auto.price$price,breaks=10000)
hist(auto.price$price,breaks=100)
hist(auto.price$price,breaks=10)
hist(auto.price$price,breaks=100)
hist(auto.price$price,breaks=100,freq=FALSE)
hist(auto.price$price,breaks=100,freq=FALSE,density=1)
hist(auto.price$price,breaks=100,freq=FALSE,density=10)
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red')
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red"
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red")
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red",border="blue)"
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red",border="blue")
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red",border="blue")
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red",border="black",main="test")
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
hist(auto.price$price,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price",ylab="frequency")
price.log <- log10(auto.price$price)
hist(auto.price$price,breaks=100,freq=FALSE,density=10)
price.log
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log)
hist(price.log,breaks=100)
hist(price.log,breaks=100,freq=FALSE)
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red")
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+
border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",+border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=FALSE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=TruE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=TruE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=100,freq=TRUE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=50,freq=TRUE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
border="black",main="test",xlab="Price",ylab="frequency")
str(price.log)
summary(price.log)
hist(price.log,breaks=50,freq=TRUE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
hist(price.log,breaks=20,freq=TRUE,density=10,col="red",border="black",main="test",xlab="Price",ylab="frequency")
summary(auto.data)
summary(auto.price)
str(auto.price)
plot(auto.price$city.mpg,price.log)
plot(auto.price$city.mpg,price.log,main="Test")
plot(auto.price$city.mpg,price.log,main="Test",type='h')
plot(auto.price$city.mpg,price.log,main="Test",type='l')
plot(auto.price$city.mpg,price.log,main="Test",type='lo')
plot(auto.price$city.mpg,price.log,main="Test",type='l',type='o')
plot(auto.price$city.mpg,price.log,main="Test",type='b')
plot(auto.price$city.mpg,price.log,main="Test",type='s')
plot(auto.price$city.mpg,price.log,main="Test",type='o')
plot(auto.price$city.mpg,price.log,auto.price$highway.mpg,main="Test",type='o')
pnorm(price.log)
pnorm(5,1,2)
pnorm(1,1,2)
pnorm(1,1,3)
pnorm(1,2,3)
pnorm(1,0,3)
pnorm(1,0,1)
rnorm(5)
binom(price.log,5,.5,alternative="two.sided")
binom.test(price.log,5,.5,alternative="two.sided")
binom.test(c(3,4).log,5,.5,alternative="two.sided")
binom.test(c(3,4),5,.5,alternative="two.sided")
t.test(price.log,alternative="two.sided")
t.test(price.log,alternative="two.sided",conf.level=.05)
