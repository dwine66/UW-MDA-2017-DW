geom_histogram(binwidth=bw,aes(hi.st),fill='yellow')+
geom_histogram(binwidth=bw,aes(low.sw),fill='blue')+
geom_histogram(binwidth=bw,aes(med.sw),fill='green')+
geom_histogram(binwidth=bw,aes(hi.sw),fill='purple') +
xlim(0,1) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,fill='red')+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dotted',size=2)+
geom_histogram(binwidth=bw,aes(hi.st),fill='yellow')+
geom_histogram(binwidth=bw,aes(low.sw),fill='blue')+
geom_histogram(binwidth=bw,aes(med.sw),fill='green')+
geom_histogram(binwidth=bw,aes(hi.sw),fill='purple') +
xlim(0,1) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,fill='red')+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),fill='yellow')+
geom_histogram(binwidth=bw,aes(low.sw),fill='blue')+
geom_histogram(binwidth=bw,aes(med.sw),fill='green')+
geom_histogram(binwidth=bw,aes(hi.sw),fill='purple') +
xlim(0,1) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),fill='blue')+
geom_histogram(binwidth=bw,aes(med.sw),fill='green')+
geom_histogram(binwidth=bw,aes(hi.sw),fill='purple') +
xlim(0,1) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='dashed',size=1) +
xlim(0,1) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
xlim(0,1) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(0,0.1:1) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(0,0.33,0.66,1) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
car.combined.df
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(breaks=seq(0,1,0.1)) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(breaks=seq(0,1,1/6)) + xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(breaks=seq(0,1,1/6), labels = c("1/6","1/3","1/2","2/3","5/6","1")) +
xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
gplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(breaks=seq(0,1,1/6), labels = c("0","1/6","1/3","1/2","2/3","5/6","1")) +
xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(breaks=seq(0,1,1/6), labels = c("0","1/6","1/3","1/2","2/3","5/6","1")) +
xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
car.stay.means
car.stay.binom.p
car.switch.binom.p
cat(car.stay.binom.p,"\n")
print(car.stay.binom.p,"\n")
car.stay.binom.p
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
bw <-.02
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(breaks=seq(0,1,1/6), labels = c("0","1/6","1/3","1/2","2/3","5/6","1")) +
xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
car.combined.df <- cbind(car.stay.df,car.switch.df)
ggplot(car.combined.df,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(breaks=seq(0,1,1/6), labels = c("0","1/6","1/3","1/2","2/3","5/6","1")) +
xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
car.stay.df.p <-  lapply(n, function(n) car.stay.df/n)
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
car.stay.df
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
car.stay.switch/n
car.stay.df/n
car.stay.df[1]
car.stay.df[1]/n[1]
car.stay.df[,]/n[,]
car.stay.df[]/n[]
for (i in 1:3){
car.stay.df.p <-  car.stay.df[,i]/n[.i]
}
for (i in 1:3){
car.stay.df.p <-  car.stay.df[,i]/n[,i]
}
car.stay.df[,]/n[]
car.stay.df[,1]/n[,1]
car.stay.df[,1]/n[i]
for (i in 1:3){
car.stay.df.p <-  car.stay.df[,i]/n[i]
}
car.stay.df.p
for (i in 1:3){
car.stay.df.p <-  car.stay.df[,i]/n[i]
car.switch.df.p <-  car.switch.df[,i]/n[i]
}
car.combined.df.p <- cbind(car.stay.df.p,car.switch.df.p)
bw <-.02
car.combined.df.p
car.stay.df.p
car.stay.df
for (i in 1:3){
car.stay.df.p[,i] <-  car.stay.df[,i]/n[i]
car.switch.df.p[,i] <-  car.switch.df[,i]/n[i]
}
car.combined.df.p
car.combined.df
car.stay.df/n
ddply(car.stay.df,.fun /n)
ddply(car.stay.df,.fun=function(n) car.stay.df/n .margins=1)
ddply(car.stay.df,.fun=function(n) /n .margins=1)
ddply(car.stay.df,.fun=function(n) x/n .margins=1)
ddply(car.stay.df,.fun=function(n) 'car.stay.df'/n .margins=1)
ddply(car.stay.df,.fun=function(n) {car.stay.df'/n} .margins=1)
)
ddply(car.stay.df,.fun=function(n) {car.stay.df/n})
ddply(car.stay.df,.fun=function(n) {car.stay.df/n},.margins=1)
lapply(car.stay.df,.fun=function(n) {car.stay.df/n})
lapply(car.stay.df,.FUN=function(n) {car.stay.df/n})
lapply(car.stay.df,FUN=function(n) {car.stay.df/n})
lapply(n,FUN=function(n) {car.stay.df/n})
car.switch.df.p <-  lapply(n, function(n) {car.switch.df/n})
lapply(car.stay.df,FUN=function(n) {car.stay.df/n})
car.switch.df.p <-  lapply(car.switch.df, function(n) {car.switch.df/n})
car.switch.df.p
car.switch.df.p <-  lapply(car.switch.df, margin=1, function(n) {car.switch.df/n})
car.switch.df.p[,1]=car.switch.df[,1]/n[1]
for (i in 1:3){
for(j in 1:m){
car.switch.df.p[j,i] <- car.switch.df[j,i]/n[i]
}
}
car.switch.df.p <- car.switch.df
for (i in 1:3){
for(j in 1:m){
car.switch.df.p[j,i] <- car.switch.df[j,i]/n[i]
}
}
car.stay.df.p <- car.stay.df
car.switch.df.p <- car.switch.df
for (i in 1:3){
for(j in 1:m){
car.stay.df.p[j,i] <- car.stay.df[j,i]/n[i]
car.switch.df.p[j,i] <- car.switch.df[j,i]/n[i]
}
}
car.combined.df.p <- cbind(car.stay.df.p,car.switch.df.p)
ggplot(car.combined.df.p,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(breaks=seq(0,1,1/6), labels = c("0","1/6","1/3","1/2","2/3","5/6","1")) +
xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
ggplot(car.combined.df.p,aes(x=low.st))+
geom_histogram(binwidth=bw,color='red', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.st),color='red', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.st),color='red', fill='NA',linetype='solid',size=1)+
geom_histogram(binwidth=bw,aes(low.sw),color='blue', fill='NA',linetype='dotted',size=1)+
geom_histogram(binwidth=bw,aes(med.sw),color='blue', fill='NA',linetype='dashed',size=1)+
geom_histogram(binwidth=bw,aes(hi.sw),color='blue', fill='NA',linetype='solid',size=1) +
scale_x_continuous(breaks=seq(0,1,1/6), labels = c("0","1/6","1/3","1/2","2/3","5/6","1")) +
xlab("Probability of winning a car")+ylab("Frequency") +
ggtitle("Cars won by switching (blue) vs. staying (red)")
car.combined.df.p
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 3 - DW.R', echo=TRUE)
setwd("~/GitHub/UW-MDA-2017-DW")
# UW Data Science Winter 2017
# Dave Wine 8430191
# Assignment 4
# Import packages
require(ggplot2)
require(car)
require(plyr)
require(dplyr)
# Functions
# File read function
read.auto = function(file = 'Automobile price data _Raw_.csv'){
auto.data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
numcols <- c('price','peak.rpm')
auto.data[, numcols]<-lapply(auto.data[,numcols], as.numeric)
factcols <- c('fuel.type','aspiration','drive.wheels')
auto.data[, factcols]<-lapply(auto.data[,factcols], as.factor)
auto.data[complete.cases(auto.data),]
}
# Histogram Plot Function
plot.t <- function(a, b, cols = c(a, b), nbins = 20){
maxs = max(c(max(a), max(b)))
mins = min(c(min(a), min(b)))
breaks = seq(maxs, mins, length.out = (nbins + 1))
par(mfrow = c(2, 1))
hist(a, breaks = breaks, main = paste('Histogram of', cols[1]), xlab = cols[1])
abline(v = mean(a), lwd = 4, col = 'red')
hist(b, breaks = breaks, main = paste('Histogram of', cols[2]), xlab = cols[2])
abline(v = mean(b), lwd = 4, col = 'red')
par(mfrow = c(1, 1))
}
####
# Main Code
####
# Read data in
auto.data = read.auto()
# View dataset and summary statistics
str(auto.data)
summary(auto.data)
####
# Normality Testing of Price and log(Price)
price <- auto.data$price
price.log <- log10(price)
# Graphical test using qqplot:
par(mfrow = c(1, 2))
qqnorm(price, main ='Q-Q plot of Price',sub=shapiro.test(price),col="red");qqline(price)
qqnorm(price.log, main = 'Q-Q plot of Log10(Price)',col="blue");qqline(price.log)
par(mfrow = c(1, 1))
# Neither looks particularly normal. log(Price) may be somewhat more normal.
# This makes some sense in that there are very few cars cheaper than some minimum number.
# Formal Test using Shapiro-Wilk
shapiro.test(price)
shapiro.test(price.log)
# Yes, log(price) is much closer to normal than price - although still not particularly normal.
####
# Significance tests
# This function takes two quantities, queries the dataset, and returns the t-test and plots
sigtest <- function(plotvar, condvar,a,b){
P1 <- filter(auto.data,condvar==a)
P2 <- filter(auto.data,condvar==b)
plot.t(P1$plotvar, P2$plotvar)
t.test(P1$plotvar,P2$plotvar, alternative = "two.sided")
}
v <- sigtest('price','fuel.type','gas','diesel')
v
# I tried to write a function for this but couldn't figure out how to pass
# column names into the dplyr filter function.  It passes the headers but not the data!
auto.gas=filter(auto.data, fuel.type =='gas')
auto.diesel=filter(auto.data, fuel.type =='diesel')
auto.std=filter(auto.data, aspiration =='std')
auto.turbo=filter(auto.data, aspiration =='turbo')
auto.fwd=filter(auto.data, drive.wheels =='fwd')
auto.rwd=filter(auto.data, drive.wheels =='rwd')
plot.t(auto.gas$price, auto.diesel$price)
plot.t(auto.std$price, auto.turbo$price)
plot.t(auto.4wd$price, auto.fwd$price)
## Two-tailed test
t.test(auto.gas$price,auto.diesel$price, alternative = "two.sided")
t.test(auto.std$price,auto.turbo$price, alternative = "two.sided")
t.test(auto.4wd$price,auto.rwd$price, alternative = "two.sided")
####
# ANOVA
auto.2d=filter(auto.data, num.of.doors == 'two')
auto.4d=filter(auto.data, num.of.doors == 'four')
df <- data.frame('group'=c(rep(1,length(auto.2d$price)),
rep(2,length(auto.4d$price))),
'val' = c(auto.2d$price,auto.4d$price))
df$group = factor(df$group) # Make sure your groups are a factor (for further analysis below)
boxplot(df$val ~ df$group)
df_aov = aov(val ~ group, data = df)
summary(df_aov)
print(df_aov)
tukey_anova = TukeyHSD(df_aov)  # Tukey's Range test:
tukey_anova
####
auto.2d=filter(auto.data, num.of.doors == 'two')
auto.4d=filter(auto.data, num.of.doors == 'four')
df <- data.frame('group'=c(rep(1,length(auto.2d$price)),
rep(2,length(auto.4d$price))),
'val' = c(log10(auto.2d$price),log10(auto.4d$price)))
df$group = factor(df$group) # Make sure your groups are a factor (for further analysis below)
boxplot(df$val ~ df$group)
df_aov = aov(val ~ group, data = df)
summary(df_aov)
print(df_aov)
tukey_anova = TukeyHSD(df_aov)  # Tukey's Range test:
tukey_anova
####
tukey_aov = TukeyHSD(df_aov)  # Tukey's Range test:
tukey_aov
summary(tukey_aov)
source('~/GitHub/UW-MDA-2017-DW/Assignment 4 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 4 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 4 - DW.R', echo=TRUE)
v <- sigtest('price','fuel.type','gas','diesel')
auto.gas=filter(auto.data, fuel.type =='gas')
source('~/GitHub/UW-MDA-2017-DW/Assignment 4 - DW.R', echo=TRUE)
source('~/GitHub/UW-MDA-2017-DW/Assignment 4 - DW.R', echo=TRUE)
t.test(auto.gas$price,auto.diesel$price, alternative = "two.sided")
t.test(auto.std$price,auto.turbo$price, alternative = "two.sided")
t.test(auto.fwd$price,auto.rwd$price, alternative = "two.sided")
auto.2d=filter(auto.data, num.of.doors == 'two')
auto.4d=filter(auto.data, num.of.doors == 'four')
df <- data.frame('group'=c(rep(1,length(auto.2d$price)),
rep(2,length(auto.4d$price))),
'val' = c(log10(auto.2d$price),log10(auto.4d$price)))
df$group = factor(df$group) # Make sure your groups are a factor (for further analysis below)
boxplot(df$val ~ df$group)
df_aov = aov(val ~ group, data = df)
summary(df_aov)
print(df_aov)
tukey_aov = TukeyHSD(df_aov)  # Tukey's Range test:
tukey_aov
####
auto.2d[,1]
auto.2d[,2]
auto.2d[1,]
auto.2d
auto.2d$price
auto.data$price <- log(auto.data$price)
auto.data$price
source('~/GitHub/UW-MDA-2017-DW/Assignment 4 - DW.R', echo=TRUE)
shapiro.test(price)
vv <-shapiro.test(price)
vv
class(vv)
vv[1]
vv$statistic
vv$statistic[1,]
vv$statistic[1]
vv$p.value
class(vv$p.value)
class(vv$statistic)
shapiro.test(price)
shapiro.test(price.log)
auto.gas=filter(auto.data, fuel.type =='gas')
auto.diesel=filter(auto.data, fuel.type =='diesel')
auto.std=filter(auto.data, aspiration =='std')
auto.turbo=filter(auto.data, aspiration =='turbo')
auto.fwd=filter(auto.data, drive.wheels =='fwd')
auto.rwd=filter(auto.data, drive.wheels =='rwd')
plot.t(auto.gas$price, auto.diesel$price)
plot.t(auto.std$price, auto.turbo$price)
plot.t(auto.fwd$price, auto.rwd$price)
t.test(auto.gas$price,auto.diesel$price, alternative = "two.sided")
t.test(auto.std$price,auto.turbo$price, alternative = "two.sided")
t.test(auto.fwd$price,auto.rwd$price, alternative = "two.sided")
str(auto.data)
df <- data.frame('group'=c(rep(1,length(auto.2d$price)),
rep(2,length(auto.4d$price))),
'val' = c(auto.2d$price,auto.4d$price))
nd <- 'num.of.doors'
auto.test = filter(auto.data,nd=='two')
auto.test
count(auto.data,body.style)
# ANOVA - Body Type
count(auto.data,body.style)
auto.con=filter(auto.data, body.style == 'convertible')
auto.har=filter(auto.data, body.style == 'hardtop')
auto.hat=filter(auto.data, body.style == 'hatchback')
auto.sed=filter(auto.data, body.style == 'sedan')
auto.wag=filter(auto.data, body.style == 'wagon')
df <- data.frame('group'=c(rep(1,length(auto.con$price)),
rep(2,length(auto.har$price)),
rep(3,length(auto.hat$price)),
rep(4,length(auto.hat$price)),
rep(5,length(auto.hat$price))),
'val' = c(auto.con$price,auto.har$price,auto.hat$price,auto.sed$price,auto.wag$price))
df$group = factor(df$group) # Make sure your groups are a factor (for further analysis below)
boxplot(df$val ~ df$group)
df_aov = aov(val ~ group, data = df)
summary(df_aov)
print(df_aov)
tukey_aov = TukeyHSD(df_aov)  # Tukey's Range test:
tukey_aov
count(auto.data,body.style)
auto.con=filter(auto.data, body.style == 'convertible')
auto.har=filter(auto.data, body.style == 'hardtop')
auto.hat=filter(auto.data, body.style == 'hatchback')
auto.sed=filter(auto.data, body.style == 'sedan')
auto.wag=filter(auto.data, body.style == 'wagon')
df <- data.frame('group'=c(rep(1,length(auto.con$price)),
rep(2,length(auto.har$price)),
rep(3,length(auto.hat$price)),
rep(4,length(auto.sed$price)),
rep(5,length(auto.wag$price))),
'val' = c(auto.con$price,auto.har$price,auto.hat$price,auto.sed$price,auto.wag$price))
df$group = factor(df$group) # Make sure your groups are a factor (for further analysis below)
boxplot(df$val ~ df$group)
df_aov = aov(val ~ group, data = df)
summary(df_aov)
print(df_aov)
tukey_aov = TukeyHSD(df_aov)  # Tukey's Range test:
tukey_aov
summary(df_aov)
print(df_aov)
plot(tukey_aov)
df <- data.frame('group'=c(rep('Convertible',length(auto.con$price)),
rep(2,length(auto.har$price)),
rep(3,length(auto.hat$price)),
rep(4,length(auto.sed$price)),
rep(5,length(auto.wag$price))),
'val' = c(auto.con$price,auto.har$price,auto.hat$price,auto.sed$price,auto.wag$price))
df$group = factor(df$group) # Make sure your groups are a factor (for further analysis below)
boxplot(df$val ~ df$group)
df_aov = aov(val ~ group, data = df)
summary(df_aov)
print(df_aov)
tukey_aov = TukeyHSD(df_aov)  # Tukey's Range test:
tukey_aov
plot(tukey_aov)
df <- data.frame('group'=c(rep('Conv.',length(auto.con$price)),
rep('Hard',length(auto.har$price)),
rep('Hat.',length(auto.hat$price)),
rep('Sedan',length(auto.sed$price)),
rep('Wagon',length(auto.wag$price))),
'val' = c(auto.con$price,auto.har$price,auto.hat$price,auto.sed$price,auto.wag$price))
df$group = factor(df$group) # Make sure your groups are a factor (for further analysis below)
boxplot(df$val ~ df$group)
df_aov = aov(val ~ group, data = df)
summary(df_aov)
print(df_aov)
tukey_aov = TukeyHSD(df_aov)  # Tukey's Range test:
tukey_aov
plot(tukey_aov)
df <- data.frame('group'=c(rep('2d',length(auto.2d$price)),
rep('4d',length(auto.4d$price))),
'val' = c(auto.2d$price,auto.4d$price))
df$group = factor(df$group) # Make sure your groups are a factor (for further analysis below)
boxplot(df$val ~ df$group)
df_aov = aov(val ~ group, data = df)
summary(df_aov)
print(df_aov)
tukey_aov = TukeyHSD(df_aov)  # Tukey's Range test:
tukey_aov
plot(tukey_aov)
